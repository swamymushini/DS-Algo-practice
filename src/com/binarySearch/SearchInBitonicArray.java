package com.binarySearch;

public class SearchInBitonicArray {

	public static void main(String[] args) {
		int solve = new SearchInBitonicArray().solve(new int[] { 1, 2, 10, 14, 17, 22, 23, 30, 35, 36, 43, 46, 48, 53,
				56, 59, 65, 88, 89, 91, 94, 96, 99, 106, 127, 130, 133, 139, 147, 150, 152, 154, 156, 169, 173, 176,
				188, 191, 192, 193, 198, 203, 216, 217, 235, 239, 244, 246, 248, 254, 266, 269, 296, 302, 305, 306, 319,
				329, 330, 348, 353, 356, 366, 367, 368, 386, 399, 401, 408, 410, 420, 422, 432, 435, 437, 439, 449, 452,
				464, 466, 469, 470, 473, 474, 475, 503, 508, 511, 514, 519, 534, 538, 545, 546, 547, 549, 550, 557, 564,
				566, 571, 573, 578, 580, 583, 588, 595, 600, 605, 613, 617, 628, 638, 640, 641, 646, 647, 649, 658, 660,
				662, 666, 669, 676, 691, 703, 707, 710, 715, 717, 719, 724, 733, 738, 740, 747, 748, 750, 754, 759, 772,
				778, 780, 791, 802, 804, 807, 817, 818, 823, 824, 827, 839, 847, 848, 853, 861, 880, 882, 887, 892, 895,
				922, 927, 938, 944, 945, 954, 957, 960, 969, 973, 981, 983, 985, 1000, 1001, 1006, 1017, 1023, 1027,
				1029, 1039, 1042, 1044, 1051, 1056, 1057, 1076, 1077, 1083, 1093, 1101, 1106, 1109, 1112, 1114, 1123,
				1131, 1152, 1166, 1174, 1175, 1188, 1192, 1196, 1206, 1217, 1218, 1221, 1225, 1233, 1235, 1237, 1248,
				1256, 1261, 1269, 1274, 1276, 1283, 1297, 1305, 1317, 1331, 1339, 1353, 1356, 1362, 1363, 1369, 1370,
				1373, 1381, 1386, 1389, 1390, 1398, 1405, 1407, 1426, 1443, 1445, 1461, 1466, 1479, 1481, 1482, 1483,
				1488, 1493, 1497, 1499, 1510, 1526, 1530, 1539, 1541, 1547, 1551, 1557, 1563, 1568, 1575, 1576, 1583,
				1585, 1590, 1596, 1604, 1605, 1623, 1626, 1629, 1631, 1639, 1669, 1675, 1679, 1680, 1684, 1691, 1698,
				1701, 1702, 1704, 1710, 1717, 1719, 1720, 1725, 1727, 1735, 1745, 1756, 1767, 1770, 1772, 1774, 1781,
				1784, 1785, 1790, 1791, 1813, 1826, 1827, 1833, 1843, 1844, 1853, 1857, 1861, 1869, 1873, 1875, 1877,
				1879, 1883, 1892, 1897, 1907, 1912, 1918, 1920, 1930, 1933, 1944, 1958, 1962, 1968, 1981, 1982, 1986,
				1994, 1989, 1983, 1976, 1973, 1966, 1964, 1963, 1952, 1947, 1942, 1940, 1939, 1938, 1936, 1927, 1923,
				1917, 1915, 1914, 1904, 1903, 1882, 1858, 1842, 1834, 1832, 1830, 1820, 1806, 1805, 1804, 1795, 1789,
				1787, 1775, 1769, 1764, 1762, 1760, 1759, 1752, 1744, 1741, 1732, 1697, 1689, 1687, 1686, 1683, 1681,
				1667, 1662, 1660, 1659, 1656, 1655, 1645, 1644, 1636, 1622, 1621, 1616, 1613, 1607, 1593, 1592, 1582,
				1579, 1574, 1573, 1565, 1559, 1523, 1522, 1521, 1518, 1515, 1509, 1503, 1501, 1500, 1495, 1494, 1491,
				1472, 1465, 1459, 1456, 1451, 1450, 1440, 1433, 1431, 1429, 1428, 1427, 1409, 1408, 1404, 1399, 1391,
				1385, 1377, 1351, 1344, 1342, 1334, 1328, 1325, 1323, 1322, 1316, 1272, 1268, 1264, 1254, 1253, 1247,
				1243, 1242, 1241, 1236, 1234, 1228, 1223, 1213, 1204, 1201, 1200, 1199, 1195, 1190, 1185, 1184, 1178,
				1176, 1169, 1162, 1161, 1144, 1142, 1140, 1135, 1132, 1122, 1115, 1111, 1105, 1103, 1098, 1073, 1070,
				1066, 1065, 1064, 1053, 1046, 1038, 1034, 1031, 1024, 1013, 1012, 1008, 986, 982, 961, 955, 934, 932,
				923, 917, 908, 906, 904, 900, 894, 889, 884, 879, 870, 868, 854, 849, 838, 837, 826, 821, 816, 808, 799,
				793, 783, 777, 775, 774, 767, 766, 753, 751, 746, 739, 737, 736, 723, 722, 718, 714, 709, 697, 694, 692,
				689, 688, 687, 686, 667, 652, 643, 636, 635, 630, 627, 622, 615, 602, 591, 576, 567, 563, 558, 555, 552,
				543, 542, 525, 524, 518, 517, 516, 515, 512, 510, 501, 498, 495, 494, 485, 484, 481, 476, 467, 463, 462,
				448, 436, 434, 428, 426, 424, 421, 418, 414, 413, 398, 393, 388, 375, 370, 364, 359, 357, 343, 338, 337,
				324, 318, 312, 309, 303, 299, 297, 291, 286, 274, 270, 264, 261, 251, 250, 245, 236, 234, 226, 221, 218,
				207, 183, 179, 178, 166, 162, 161, 160, 151, 146, 144, 142, 138, 136, 132, 124, 120, 119, 116, 114, 111,
				105, 95, 90, 67, 62, 51, 47, 34, 26, 16, 15, 13, 6, 3 }, 1804);

		System.out.println(solve);
	}

	public int solve(int[] A, int B) {

		int l = 0;
		int r = A.length - 1;
		int sep = 0;

		if (r == 0)
			return A[0];

		while (l <= r) {

			int mid = (l + r) / 2;

			if (A[mid] >= A[mid + 1] && A[mid] >= A[mid - 1]) {
				sep = mid;
				break;
			} else if (A[mid] <= A[mid + 1] && A[mid] >= A[mid - 1])
				l = mid + 1;
			else
				r = mid - 1;

		}

		if (B <= A[sep]) {
			l = 0;
			r = sep;

			while (l <= r) {
				int mid = (l + r) / 2;

				if (A[mid] == B) {
					return mid;
				} else if (A[mid] < B) {
					l = mid + 1;
				} else
					r = mid - 1;

			}
		}

		if (B <= A[sep + 1]) {
			l = sep + 1;
			r = A.length - 1;

			while (l <= r) {
				int mid = (l + r) / 2;

				if (A[mid] == B) {
					return mid;
				} else if (A[mid] < B) {
					r = mid - 1;
				} else
					l = mid + 1;
			}

		}

		return -1;

	}

}
